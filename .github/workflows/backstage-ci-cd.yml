# Complete Backstage CI/CD Pipeline
# This combines all phases into production-ready workflows

name: Backstage CI/CD

on:
  pull_request:
    branches: [main]
    paths:
      - 'asela-apps/**'
      - '.github/workflows/**'
  push:
    branches: [main]
    paths:
      - 'asela-apps/**'
      - '.github/workflows/**'

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  ECR_REPOSITORY: backstage

permissions:
  contents: read
  pull-requests: write
  security-events: write
  id-token: write
  actions: read
  packages: write

jobs:
  # ============================================
  # PR WORKFLOW - Runs on Pull Requests
  # ============================================
  
  # Phase 1: Code Quality
  code-quality:
    name: Code Quality Checks
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Get yarn cache
        id: yarn-cache
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      
      - uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache.outputs.dir }}
            asela-apps/.yarn/unplugged
            asela-apps/.yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      
      - name: Install dependencies
        working-directory: ./asela-apps
        run: yarn install --immutable
      
      - name: Run all quality checks
        working-directory: ./asela-apps
        run: |
          yarn lint:all
          yarn prettier:check
          yarn tsc:full

  # Phase 2: Testing
  test:
    name: Test Suite
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20', '22']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Get yarn cache
        id: yarn-cache
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      
      - uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache.outputs.dir }}
            asela-apps/.yarn/unplugged
            asela-apps/.yarn/install-state.gz
          key: ${{ runner.os }}-node${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
      
      - name: Install dependencies
        working-directory: ./asela-apps
        run: yarn install --immutable
      
      - name: Run tests with coverage
        working-directory: ./asela-apps
        run: yarn test:all --ci
      
      - name: Upload coverage
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          directory: ./asela-apps/coverage
          flags: unittests
          fail_ci_if_error: false

  # Phase 3: Security
  security:
    name: Security Scanning
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './asela-apps'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

  # Phase 4: Docker Build (PR)
  docker-pr:
    name: Docker Build Test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./asela-apps
          file: ./asela-apps/Dockerfile
          push: false
          tags: backstage:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # PR Gate - All checks must pass
  pr-gate:
    name: PR Gate
    if: github.event_name == 'pull_request'
    needs: [code-quality, test, security, docker-pr]
    runs-on: ubuntu-latest
    steps:
      - name: PR Gate Status
        run: |
          echo "## PR Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "âœ… All PR checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker-pr.result }}" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # MAIN WORKFLOW - Runs on push to main
  # ============================================
  
  # Phase 5: Build and Push to ECR
  build-push:
    name: Build and Push to ECR
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.set-outputs.outputs.image-uri }}
      image-digest: ${{ steps.set-outputs.outputs.image-digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - uses: docker/setup-buildx-action@v3
      
      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-
            type=raw,value=latest
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
      
      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./asela-apps
          file: ./asela-apps/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      
      - name: Create deployment manifest
        run: |
          cat > deployment-manifest.json << EOF
          {
            "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}",
            "digest": "${{ steps.build.outputs.digest }}",
            "tags": ${{ steps.meta.outputs.json }},
            "commit": "${{ github.sha }}",
            "timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          }
          EOF
      
      - name: Upload manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment-manifest.json
          
      - name: Set final outputs
        id: set-outputs
        run: |
          echo "=== Setting Final Outputs ==="
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          REPOSITORY="${{ env.ECR_REPOSITORY }}"
          FINAL_URI="${REGISTRY}/${REPOSITORY}:latest"
          
          echo "Registry: '$REGISTRY'"
          echo "Repository: '$REPOSITORY'"
          echo "Final URI: '$FINAL_URI'"
          
          # Set outputs using the new syntax
          echo "image-uri=${FINAL_URI}" >> $GITHUB_OUTPUT
          echo "image-digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT
          
          # Verify outputs were set
          echo "Verifying GITHUB_OUTPUT file:"
          cat $GITHUB_OUTPUT || echo "Could not read GITHUB_OUTPUT"
          
          # Log to summary
          echo "### Build Output Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: \`${REGISTRY}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: \`${REPOSITORY}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Image URI: \`${FINAL_URI}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Digest: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

  # Security scan on pushed image
  scan-image:
    name: Scan ECR Image
    needs: build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Run Trivy on ECR image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-push.outputs.image-uri }}
          format: 'sarif'
          output: 'trivy-ecr.sarif'
      
      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-ecr.sarif'

  # Phase 6: Update GitOps (COMMENTED OUT - NOT IMPLEMENTED YET)
  # update-gitops:
  #   name: Update GitOps Repository
  #   needs: [build-push, scan-image]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout GitOps repo
  #       uses: actions/checkout@v4
  #       with:
  #         repository: ${{ github.repository_owner }}/backstage-gitops
  #         token: ${{ secrets.GITOPS_REPO_TOKEN }}
  #         path: gitops
  #     
  #     - name: Update development environment
  #       run: |
  #         cd gitops
  #         # Update image reference (implementation depends on your GitOps structure)
  #         echo "Updated image to: ${{ needs.build-push.outputs.image-uri }}"
  #         echo "Digest: ${{ needs.build-push.outputs.image-digest }}"
  #         
  #         # Example: Update kustomization.yaml
  #         # yq eval -i '.images[0].digest = "${{ needs.build-push.outputs.image-digest }}"' environments/development/kustomization.yaml
  #     
  #     - name: Commit and push
  #       run: |
  #         cd gitops
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #         git add .
  #         git diff --staged --quiet || git commit -m "chore: update backstage to ${{ github.sha }}"
  #         git push

  # Create release (COMMENTED OUT - NOT IMPLEMENTED YET)
  # create-release:
  #   name: Create Release
  #   needs: [build-push, scan-image]  # Removed update-gitops dependency
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create GitHub Release
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const release = await github.rest.repos.createRelease({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             tag_name: `v${{ github.run_number }}`,
  #             name: `Release v${{ github.run_number }}`,
  #             body: `## Backstage Release
  #             
  #             **Commit**: ${{ github.sha }}
  #             **Image**: ${{ needs.build-push.outputs.image-uri }}
  #             **Digest**: ${{ needs.build-push.outputs.image-digest }}`,
  #             draft: false,
  #             prerelease: false
  #           });

  # Main workflow summary
  main-summary:
    name: Deployment Summary
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-push, scan-image]  # Removed update-gitops and create-release
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Image built and pushed to ECR**" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Security scans completed**" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Deployment manifest created**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **URI**: ${{ needs.build-push.outputs.image-uri }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ needs.build-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Image is ready for deployment" >> $GITHUB_STEP_SUMMARY
          echo "- GitOps integration coming soon" >> $GITHUB_STEP_SUMMARY
          echo "- Manual deployment available via kubectl or Helm" >> $GITHUB_STEP_SUMMARY