apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: crossplane-mysql-database
  title: Crossplane MySQL Database
  description: Create a MySQL database using Crossplane XRD with Vault secret management
  tags:
    - crossplane
    - database
    - mysql
    - gitops
spec:
  owner: platform-team
  type: resource
  parameters:
    - title: Database Configuration
      required:
        - name
        - namespace
        - databaseName
        - username
      properties:
        name:
          title: Resource Name
          type: string
          description: Name for the MySQLDatabase resource
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
        namespace:
          title: Namespace
          type: string
          description: Kubernetes namespace for the database
        databaseName:
          title: Database Name
          type: string
          description: Actual database name in MySQL
        username:
          title: Database Username
          type: string
          description: Username for database access
        userNamespace:
          title: User Namespace
          type: string
          description: Namespace where user credentials will be created
          default: "${{ parameters.namespace }}-backend"
    - title: Vault Configuration
      required:
        - vaultSecretPath
      properties:
        vaultSecretPath:
          title: Vault Secret Path
          type: string
          description: Path in Vault where the database password is stored
          default: "secret/data/mysql/${{ parameters.name }}"
        vaultSecretKey:
          title: Vault Secret Key
          type: string
          description: Key in Vault secret containing the password
          default: "password"
        privileges:
          title: Database Privileges
          type: array
          description: List of privileges for the user
          default:
            - SELECT
            - INSERT
            - UPDATE
            - DELETE
          items:
            type: string
            enum:
              - SELECT
              - INSERT
              - UPDATE
              - DELETE
              - CREATE
              - DROP
              - INDEX
              - ALTER

  steps:
    - id: fetch
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          databaseName: ${{ parameters.databaseName }}
          username: ${{ parameters.username }}
          userNamespace: ${{ parameters.userNamespace }}
          vaultSecretPath: ${{ parameters.vaultSecretPath }}
          vaultSecretKey: ${{ parameters.vaultSecretKey }}
          privileges: ${{ parameters.privileges }}

    - id: publish
      name: Publish to GitHub
      action: publish:github:pull-request
      input:
        repoUrl: github.com?owner=arigsela&repo=kubernetes
        title: "Deploy MySQLDatabase: ${{ parameters.name }}"
        description: |
          This PR creates a new MySQLDatabase resource via Crossplane XRD.
          
          **Resource Details:**
          - Name: `${{ parameters.name }}`
          - Namespace: `${{ parameters.namespace }}`
          - Database: `${{ parameters.databaseName }}`
          - User: `${{ parameters.username }}`
          - Vault Path: `${{ parameters.vaultSecretPath }}`
          
          **Files Created:**
          - ArgoCD Application: `base-apps/${{ parameters.namespace }}-${{ parameters.name }}.yaml`
          - Secret Store: `base-apps/${{ parameters.namespace }}-${{ parameters.name }}/secret_stores.yaml`
          - External Secret: `base-apps/${{ parameters.namespace }}-${{ parameters.name }}/external_secrets.yaml`
          - MySQL Database: `base-apps/${{ parameters.namespace }}-${{ parameters.name }}/mysql-database.yaml`
        branchName: mysql-db-${{ parameters.namespace }}-${{ parameters.name }}
        targetPath: ./

    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/base-apps/${{ parameters.namespace }}-${{ parameters.name }}/catalog-info.yaml'

  output:
    links:
      - title: Pull Request
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}